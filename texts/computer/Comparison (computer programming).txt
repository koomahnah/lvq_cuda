In computer science, a relational operator is a programming language construct or operator that tests or defines some kind of relation between two entities. These include numerical equality (e.g., 5 = 5) and inequalities (e.g., 4   3).
In programming languages that include a distinct boolean data type in their type system, like Pascal, Ada or Java, these operators usually evaluate to true or false, depending on whether the conditional relationship between the two operands holds or not. In languages such as C, relational operators return the integers 0 or 1, where 0 stands for false and any nonzero value stands for true.
An expression created using a relational operator forms what is known as a relational expression or a condition. Relational operators can be seen as special cases of logical predicates.






Equality is being used in many programming-language constructs and data types. It is used to test whether an element already exists in a set, or to access to a value through a key. It is used in Switch statements to dispatch the control flow to the correct branch, and during the unification process in logic programming.
One of the possible meaning of equality is that "if a equals to b, then we can use either a or b interchangably in any context without noticing any difference". But this statement does not necessarily hold, particularly when taking into account mutability together with content equality.



Sometimes, particularly in object-oriented programming, the comparison raises questions of data types and inheritance, equality and identity. It is often necessary to distinguish between:
two different objects of the same type, e.g. two hands
two objects being equal but distinct, e.g. two $10 banknotes
two objects being equal but have different representation, e.g. a $1 bill and a $1 coin
two different references to the same object, e.g. two nicknames for the same person
In many modern programming languages, objects and data structures are accessed through references. In such languages, there becomes a need to test for two different types of equality:
Physical equality - whether two references reference the same object.
Semantic equality - whether the objects referenced by two references are equivalent in some sense:

Structural equality (e.g. their contents are the same). which may be either shallow (testing only immediate subparts) or deep (testing for equality recursively).
Some other tailor-made equality, preserving the external behavior. For example, 1/2 and 2/4 are considered equal when seen as a rational number. A possible requirement would be that "A = B if and only if all operations on objects A and B will have the same result", in additional to reflexivity, symmetry and transitivity.

The first type of equality usually implies the second (except for things like NaN which are unequal to themselves), but the converse is not necessarily true. For example, two string objects may be distinct objects (unequal in the first sense) but contain the same sequence of characters (equal in the second sense). See identity for more of this issue.
Real numbers, including many simple fractions, cannot be represented exactly in floating-point arithmetic, and it may be necessary to test for equality within a given tolerance. Such tolerance, however, can easily break desired properties such as transitivity, whereas reflexivity breaks too: the IEEE floating point standard requires that Nan   NaN holds.
Other programming elements such as computable functions, may either have no sense of equality, or that equality is itself not computable. For these reasons some languages define an explicit notion of "comparable", in the form of a base class, an interface, a trait or a protocol. Used either by explicit declaration from the programmer's side or implicitly through the structure of the type involved.



In JavaScript, PHP and a few other dynamically types languages, the standard equality operator evaluates to true if two values are equal, even if they have different types, making the number 4 compare equal to the text string "4", for instance. A typed equality operator is often available as well, in such languages, returning true only for values with identical or equivalent types (in PHP 5, 4  0 would be true for x being either 0 or "0" using the type agnostic equality operator).



"Greater than" and "less than" comparison of non-numeric data is performed according to a sort convention (such as, for text strings, lexicographical order) which may be built into the programming language and/or configurable by the programmer.
When it is desired to associate a numeric value with the result of a comparison between two data items, say "a" and "b", the usual convention is to assign  1 if a < b, 0 if a = b and 1 if a > b. For example, the C function strcmp performs a three-way comparison and returns  1, 0, or 1 according to this convention, and qsort expects the comparison function to return values according to this convention. In sorting algorithms, the efficiency of comparison code is critical since it is one of the major factors contributing to sorting performance.
Comparison of programmer-defined data types (data types of which the programming language itself has no in-built understanding) may be carried out by custom-written or library functions (such as strcmp mentioned above), or, in some languages, by "overloading" a comparison operator   that is, assigning a programmer-defined meaning that depends on the data types being compared. Another alternative is using some convention such as memberwise comparison.



Though perhaps not obvious at first, like the boolean logical operators XOR, AND, OR, and NOT, relational operators can be designed to have logical equivalence, such that they can all be defined in terms of one another. The following four conditional statements all have the same logical equivalence E (either all true or all false) for any given x and y values:

This relies on the domain being well ordered.



The most common numerical relational operators used in programming languages are shown below.

Other conventions are less common: Common Lisp and Macsyma/Maxima use Basic-like operators except for inequality, which is /= in Common Lisp and # in Macsyma/Maxima. Older Lisps used equal, greaterp, and lessp; and negated them using not for the remaining operators.



Relational operators are also used in technical literature instead of words. Relational operators are usually written in infix notation, if supported by the programming language, which means that they appear between their operands (the two expressions being related). For example, an expression in Python will print the message if the x is less than y:

Other programming languages, such as Lisp, use prefix notation, as follows:



In mathematics, it is common practice to chain relational operators, such as in 3 < x < y < 20 (meaning 3 < x and x < y and y < 20). The syntax is clear since these relational operators in mathematics are transitive.
However, many recent programming languages would see an expression like 3 < x < y as consiting of two left (or right-) associative operators, interpreting it as something like (3 < x) < y. If we say that x=4, we then get (3 < 4) < y, and evaluation will give true < y which generally does not make sense. However, it does compile in C/C++ and some other languages, yielding surprising result (as true would be represented by the number 1 here).
It is possible to give the expression x < y < z its familiar mathematical meaning, and some programming languages such as Python and older languages do that, others, such as C#, Java, and D, do not, partly because it would break away from the way most other infix operators work in C-like languages.
Some languages, like Common Lisp, use multiple argument predicates for this. In Lisp (<= 1 x 10) is true when x is between 1 and 10.




Early FORTRAN (1956 57) was bounded by heavily restricted character sets where "=" was the only relational operator available. There were no "<" or ">" (and certainly no   or  ). This forced the designers to define symbols such as .GT., .LT., .GE., .EQ. etc. and subsequently made it tempting to use the remaining "=" character for copying, despite the obvious incoherence with mathematical usage (X=X+1 should be impossible).
International Algebraic Language and ALGOL (1958 and 1960) therefore introduced ":=" for assignment, leaving the standard "=" available for equality, a convention followed by CPL, Algol W, BCPL, Simula, Algol 68, SETL, Pascal, Smalltalk, Modula2, Ada, Standard ML, OCaml, Eiffel, Delphi, Oberon, Dylan, VHDL, and several other languages.



This uniform de facto standard among most programming languages was eventually changed, indirectly, by a minimalistic compiled language called B. It was a language with the sole intended application as a vehicle for a first port of (a then very primitive) UNIX, but it also evolved into the very influential C language.
B started of as a syntactically changed variant of the systems programming language BCPL, a simplified (and typeless) version of CPL. In what has been described as a "strip-down" process, the and and or operators of BCPL were replaced with "&" and "|" (which would later become "&&" and "||", respectively.). In the same process, the Algol style := of BCPL was replaced by = in B. The reason for all this being unknown. As variable updates had no special syntax in B (such as let or similar) and were allowed in expressions, this non standard meaning of the equal sign meant that the traditional semantics of the equal sign now had to be associated with another symbol. Ken Thompson used the ad hoc "==" combination for this.
As a small type system was later introduced, B then became C. The popularity of this language along with its association with UNIX, led to Java, C#, and many other languages following suit, syntactically, despite this unnecessary conflict with the mathematical meaning of the equal sign.



Assignments in C have a value and since any non-zero scalar value is interpreted as true in conditional expressions, the code "if (x = y)" is legal, but has a very different meaning from "if (x == y)". The former code fragment means "assign y to x, and if the new value of x is not zero, execute the following statement". The latter fragment means "if and only if x is equal to y, execute the following statement".

Though Java and C# have the same operators as C, this mistake usually causes a compile error in these languages instead, because the if-condition must be of type boolean, and there is no implicit way to convert from other types (e.g. numbers) into booleans. So unless the variable that is assigned to has type boolean (or wrapper type Boolean), there will be a compile error.
In Algol-like languages such as Pascal, Delphi and Ada (in the sense that they allow nested function definitions) as well as in Python and many functional languages, among others, assignment operators cannot appear in an expression (including if clauses), thus precluding this class of error. Some compilers, such as GCC, will provide a warning when compiling code that contains an assignment operator inside an if statement, though there are some legitimate uses of an assignment inside an if-condition. In those cases the programmer would need to explicitly wrap the assignment in an extra pair of parentheses to avoid the warning.
Similarly, some languages, such as BASIC use just the "=" symbol for both assignment and equality, as they are syntactically separate (as with Pascal, Ada, Python, etc., assignment operators cannot appear in expressions).
Some programmers get in the habit of writing comparisons against a constant in the reverse of the usual order:

If the programmer accidentally uses =, the resulting code is invalid because 2 is not a variable. The compiler will generate an error message, upon which the proper operator can be substituted. This coding style is known as left-hand comparison, or Yoda conditions.
The following table lists the different mechanisms to test for these two types of equality in various languages:



Binary relation
Common operator notation
Equality (mathematics)
Equals sign
Logical operator
Operation (mathematics)
Operator (mathematics)
Operator (programming)
Spaceship operator
Triadic relation


